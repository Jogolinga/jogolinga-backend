// ===================================================================
// services/subscriptionService.js - SERVICE D'ABONNEMENTS S√âCURIS√â
// ===================================================================
const { createClient } = require('@supabase/supabase-js');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

// Initialisation Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

class SubscriptionService {
  constructor() {
    console.log('üí≥ SubscriptionService initialis√©');
    
    // D√©finition des fonctionnalit√©s premium
    this.premiumFeatures = [
      'grammar_full',
      'sentence_construction',
      'sentence_gap',
      'exercise_unlimited',
      'offline_mode',
      'google_drive_sync',
      'advanced_stats',
      'custom_audio_upload',
      'priority_support'
    ];

    // V√©rifications de configuration
    if (!process.env.STRIPE_SECRET_KEY) {
      console.warn('‚ö†Ô∏è STRIPE_SECRET_KEY non configur√©');
    }
    if (!process.env.SUPABASE_URL) {
      throw new Error('SUPABASE_URL non configur√©');
    }
  }

  // ===================================================================
  // V√âRIFICATION D'ABONNEMENT
  // ===================================================================
  async verifyUserSubscription(userId) {
    try {
      console.log('üîç V√©rification abonnement pour userId:', userId);
      
      const { data: subscription, error } = await supabase
        .from('subscriptions')
        .select('*')
        .eq('user_id', userId)
        .single();

      // Pas d'abonnement trouv√© = utilisateur gratuit
      if (error && error.code === 'PGRST116') {
        console.log('üìù Aucun abonnement trouv√©, cr√©ation d\'un abonnement gratuit');
        
        // Cr√©er un abonnement gratuit par d√©faut
        await supabase
          .from('subscriptions')
          .insert([{
            user_id: userId,
            tier: 'free',
            status: 'active',
            created_at: new Date().toISOString()
          }]);

        return {
          isPremium: false,
          tier: 'free',
          status: 'active',
          expiresAt: null,
          billingPeriod: null,
          planId: 'free_plan'
        };
      }

      if (error) {
        console.error('‚ùå Erreur r√©cup√©ration abonnement:', error);
        throw error;
      }

      // V√©rifier l'expiration
      let isActive = subscription.status === 'active';
      if (subscription.expires_at && new Date() > new Date(subscription.expires_at)) {
        isActive = false;
        console.log('‚è∞ Abonnement expir√©');
      }

      // Si abonnement Stripe, v√©rifier c√¥t√© Stripe
      if (subscription.stripe_subscription_id && isActive) {
        try {
          console.log('üîÑ V√©rification Stripe pour:', subscription.stripe_subscription_id);
          
          const stripeSubscription = await stripe.subscriptions.retrieve(
            subscription.stripe_subscription_id
          );
          
          const stripeIsActive = ['active', 'trialing'].includes(stripeSubscription.status);
          
          // Mettre √† jour en base si statut diff√©rent
          if (isActive !== stripeIsActive) {
            console.log('üîÑ Mise √† jour statut depuis Stripe:', stripeIsActive);
            
            await supabase
              .from('subscriptions')
              .update({
                status: stripeIsActive ? 'active' : 'cancelled',
                expires_at: stripeIsActive ? 
                  new Date(stripeSubscription.current_period_end * 1000).toISOString() : 
                  new Date().toISOString()
              })
              .eq('user_id', userId);
          }
          
          isActive = stripeIsActive;
        } catch (stripeError) {
          console.error('‚ö†Ô∏è Erreur v√©rification Stripe:', stripeError.message);
          // Continuer avec les donn√©es locales en cas d'erreur Stripe
        }
      }

      const result = {
        isPremium: isActive && subscription.tier === 'premium',
        tier: isActive ? subscription.tier : 'free',
        status: isActive ? 'active' : 'expired',
        expiresAt: subscription.expires_at,
        billingPeriod: subscription.billing_period,
        planId: subscription.plan_id || (subscription.tier === 'premium' ? 'premium_plan' : 'free_plan'),
        stripeSubscriptionId: subscription.stripe_subscription_id
      };

      console.log('‚úÖ Statut abonnement:', result);
      return result;
      
    } catch (error) {
      console.error('‚ùå Erreur verifyUserSubscription:', error);
      
      // Retourner un abonnement gratuit en cas d'erreur
      return {
        isPremium: false,
        tier: 'free',
        status: 'active',
        expiresAt: null,
        billingPeriod: null,
        planId: 'free_plan'
      };
    }
  }

  // ===================================================================
  // V√âRIFICATION D'ACC√àS AUX FONCTIONNALIT√âS
  // ===================================================================
  async checkFeatureAccess(userId, feature) {
    try {
      console.log(`üîë V√©rification acc√®s feature "${feature}" pour userId:`, userId);
      
      const subscription = await this.verifyUserSubscription(userId);
      const hasAccess = !this.premiumFeatures.includes(feature) || subscription.isPremium;

      const result = {
        hasAccess,
        isPremium: subscription.isPremium,
        tier: subscription.tier,
        feature,
        reason: !hasAccess ? 'Cette fonctionnalit√© n√©cessite un abonnement Premium' : null,
        expiresAt: subscription.expiresAt
      };

      console.log('‚úÖ R√©sultat acc√®s:', result);
      return result;
      
    } catch (error) {
      console.error('‚ùå Erreur checkFeatureAccess:', error);
      return {
        hasAccess: false,
        isPremium: false,
        tier: 'free',
        feature,
        reason: 'Erreur lors de la v√©rification des permissions'
      };
    }
  }

  // Middleware pour les fonctionnalit√©s Premium
  requirePremium = async (req, res, next) => {
    try {
      const access = await this.checkFeatureAccess(req.user.id, 'premium_required');
      
      if (!access.hasAccess) {
        return res.status(403).json({
          error: 'Acc√®s Premium requis',
          message: 'Cette fonctionnalit√© n√©cessite un abonnement Premium',
          currentTier: access.tier,
          upgradeUrl: `${process.env.FRONTEND_URL}/subscription`
        });
      }
      
      next();
    } catch (error) {
      console.error('‚ùå Erreur middleware Premium:', error);
      res.status(500).json({ error: 'Erreur de v√©rification des permissions' });
    }
  }

  // ===================================================================
  // GESTION STRIPE
  // ===================================================================

  // Cr√©er une session de paiement Stripe
  async createCheckoutSession({ userId, userEmail, planId, priceId, successUrl, cancelUrl }) {
    try {
      console.log(`üí≥ Cr√©ation session Stripe pour userId: ${userId}, planId: ${planId}`);
      
      // V√©rifier que l'utilisateur existe
      const { data: user, error: userError } = await supabase
        .from('users')
        .select('id, email')
        .eq('id', userId)
        .single();

      if (userError || !user) {
        throw new Error('Utilisateur non trouv√©');
      }

      // Cr√©er la session Stripe
      const session = await stripe.checkout.sessions.create({
        payment_method_types: ['card'],
        line_items: [{
          price: priceId,
          quantity: 1,
        }],
        mode: 'subscription',
        success_url: successUrl + '?session_id={CHECKOUT_SESSION_ID}',
        cancel_url: cancelUrl,
        customer_email: userEmail,
        client_reference_id: userId,
        metadata: {
          userId: userId,
          planId: planId
        },
        subscription_data: {
          metadata: {
            userId: userId,
            planId: planId
          }
        },
        allow_promotion_codes: true,
        billing_address_collection: 'required',
      });

      console.log('‚úÖ Session Stripe cr√©√©e:', session.id);
      return session.id;
      
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation session Stripe:', error);
      throw new Error('Impossible de cr√©er la session de paiement: ' + error.message);
    }
  }

  // V√©rifier un paiement
  async verifyPayment(sessionId, userId) {
    try {
      console.log(`üí∞ V√©rification paiement sessionId: ${sessionId}, userId: ${userId}`);
      
      const session = await stripe.checkout.sessions.retrieve(sessionId, {
        expand: ['subscription', 'customer']
      });

      // V√©rifier que la session appartient bien √† cet utilisateur
      if (session.client_reference_id !== userId) {
        throw new Error('Session non autoris√©e pour cet utilisateur');
      }

      if (session.payment_status === 'paid') {
        console.log('‚úÖ Paiement confirm√©');
        
        // Mettre √† jour l'abonnement en base
        if (session.mode === 'subscription' && session.subscription) {
          const stripeSubscription = typeof session.subscription === 'string' 
            ? await stripe.subscriptions.retrieve(session.subscription)
            : session.subscription;

          await this.updateUserSubscription(userId, {
            stripeCustomerId: session.customer.id || session.customer,
            stripeSubscriptionId: stripeSubscription.id,
            tier: 'premium',
            status: 'active',
            expiresAt: new Date(stripeSubscription.current_period_end * 1000).toISOString(),
            planId: session.metadata?.planId || 'premium_plan',
            billingPeriod: stripeSubscription.items.data[0]?.price?.recurring?.interval || 'monthly'
          });

          console.log('‚úÖ Abonnement mis √† jour en base');
        }

        return {
          status: 'completed',
          planId: session.metadata?.planId,
          subscriptionId: session.subscription?.id || session.subscription,
          customerEmail: session.customer_email,
          amountTotal: session.amount_total ? session.amount_total / 100 : null
        };
      }

      return {
        status: 'pending',
        paymentStatus: session.payment_status,
        message: 'Paiement en attente de confirmation'
      };
      
    } catch (error) {
      console.error('‚ùå Erreur v√©rification paiement:', error);
      throw new Error('Erreur lors de la v√©rification du paiement: ' + error.message);
    }
  }

  // Mettre √† jour l'abonnement utilisateur
  async updateUserSubscription(userId, subscriptionData) {
    try {
      console.log('üîÑ Mise √† jour abonnement pour userId:', userId);
      
      const { data, error } = await supabase
        .from('subscriptions')
        .upsert([{
          user_id: userId,
          stripe_customer_id: subscriptionData.stripeCustomerId,
          stripe_subscription_id: subscriptionData.stripeSubscriptionId,
          tier: subscriptionData.tier,
          status: subscriptionData.status,
          expires_at: subscriptionData.expiresAt,
          plan_id: subscriptionData.planId,
          billing_period: subscriptionData.billingPeriod,
          updated_at: new Date().toISOString()
        }], {
          onConflict: 'user_id'
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erreur mise √† jour abonnement:', error);
        throw error;
      }
      
      console.log('‚úÖ Abonnement mis √† jour:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur updateUserSubscription:', error);
      throw error;
    }
  }

  // ===================================================================
  // GESTION PROGRESSION UTILISATEUR
  // ===================================================================

  // Sauvegarder la progression utilisateur
  async saveUserProgress({ userId, languageCode, progressData, totalXP, completedCategories }) {
    try {
      console.log(`üíæ Sauvegarde progression ${languageCode} pour userId: ${userId}`);
      
      const { data, error } = await supabase
        .from('user_progress')
        .upsert([{
          user_id: userId,
          language_code: languageCode,
          progress_data: progressData,
          total_xp: totalXP || 0,
          completed_categories: completedCategories || [],
          last_synced: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }], {
          onConflict: 'user_id,language_code'
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erreur sauvegarde progression:', error);
        throw error;
      }
      
      console.log('‚úÖ Progression sauvegard√©e');
      return data;
    } catch (error) {
      console.error('‚ùå Erreur saveUserProgress:', error);
      throw error;
    }
  }

  // R√©cup√©rer la progression utilisateur
  async getUserProgress(userId, languageCode) {
    try {
      console.log(`üìÇ Chargement progression ${languageCode} pour userId: ${userId}`);
      
      const { data, error } = await supabase
        .from('user_progress')
        .select('*')
        .eq('user_id', userId)
        .eq('language_code', languageCode)
        .single();

      if (error && error.code !== 'PGRST116') {
        console.error('‚ùå Erreur r√©cup√©ration progression:', error);
        throw error;
      }

      if (error && error.code === 'PGRST116') {
        console.log('üìù Aucune progression trouv√©e');
        return null;
      }
      
      console.log('‚úÖ Progression charg√©e');
      return data;
    } catch (error) {
      console.error('‚ùå Erreur getUserProgress:', error);
      return null;
    }
  }

  // ===================================================================
  // WEBHOOKS STRIPE
  // ===================================================================

  // G√©rer les mises √† jour d'abonnement
  async handleSubscriptionUpdate(subscription) {
    try {
      const userId = subscription.metadata?.userId;
      if (!userId) {
        console.error('‚ùå UserId manquant dans les m√©tadonn√©es Stripe');
        return;
      }

      console.log('üîÑ Webhook: Mise √† jour abonnement pour userId:', userId);

      await this.updateUserSubscription(userId, {
        stripeSubscriptionId: subscription.id,
        tier: 'premium',
        status: subscription.status === 'active' ? 'active' : 'cancelled',
        expiresAt: new Date(subscription.current_period_end * 1000).toISOString(),
        billingPeriod: subscription.items.data[0]?.price?.recurring?.interval || 'monthly',
        planId: subscription.metadata?.planId || 'premium_plan'
      });

      console.log('‚úÖ Webhook: Abonnement mis √† jour');
    } catch (error) {
      console.error('‚ùå Erreur webhook subscription update:', error);
    }
  }

  // G√©rer l'annulation d'abonnement
  async handleSubscriptionCancellation(subscription) {
    try {
      const userId = subscription.metadata?.userId;
      if (!userId) {
        console.error('‚ùå UserId manquant pour annulation');
        return;
      }

      console.log('üö´ Webhook: Annulation abonnement pour userId:', userId);

      await supabase
        .from('subscriptions')
        .update({
          status: 'cancelled',
          cancelled_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .eq('stripe_subscription_id', subscription.id);

      console.log('‚úÖ Webhook: Abonnement annul√©');
    } catch (error) {
      console.error('‚ùå Erreur webhook cancellation:', error);
    }
  }

  // G√©rer les paiements r√©ussis
  async handleSuccessfulPayment(paymentIntent) {
    try {
      console.log('üí∞ Webhook: Paiement r√©ussi:', paymentIntent.id);
      
      // Enregistrer dans l'historique des paiements si n√©cessaire
      if (paymentIntent.metadata?.userId) {
        await supabase
          .from('payment_history')
          .insert([{
            user_id: paymentIntent.metadata.userId,
            stripe_payment_intent_id: paymentIntent.id,
            amount: paymentIntent.amount,
            currency: paymentIntent.currency.toUpperCase(),
            status: 'completed',
            completed_at: new Date().toISOString()
          }]);
      }
    } catch (error) {
      console.error('‚ùå Erreur webhook payment success:', error);
    }
  }

  // ===================================================================
  // UTILITAIRES ET STATISTIQUES
  // ===================================================================

  // V√©rifier la sant√© de la base de donn√©es
  async checkDatabaseHealth() {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('id')
        .limit(1);

      return error ? 'unhealthy' : 'healthy';
    } catch (error) {
      console.error('‚ùå Erreur health check database:', error);
      return 'unhealthy';
    }
  }

  // Obtenir les statistiques d'abonnements
  async getSubscriptionStats() {
    try {
      const { data: subscriptions, error } = await supabase
        .from('subscriptions')
        .select('tier, status, created_at, billing_period');

      if (error) throw error;

      const now = new Date();
      const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);

      const stats = {
        totalSubscriptions: subscriptions.length,
        freeUsers: subscriptions.filter(s => s.tier === 'free').length,
        premiumUsers: subscriptions.filter(s => s.tier === 'premium' && s.status === 'active').length,
        cancelledUsers: subscriptions.filter(s => s.status === 'cancelled').length,
        newSubscriptionsThisMonth: subscriptions.filter(s => 
          new Date(s.created_at) >= thisMonth && s.tier === 'premium'
        ).length,
        monthlySubscriptions: subscriptions.filter(s => 
          s.billing_period === 'monthly' && s.status === 'active'
        ).length,
        yearlySubscriptions: subscriptions.filter(s => 
          s.billing_period === 'yearly' && s.status === 'active'
        ).length
      };

      // Calculer le taux de conversion
      if (stats.totalSubscriptions > 0) {
        stats.conversionRate = Math.round((stats.premiumUsers / stats.totalSubscriptions) * 100);
      } else {
        stats.conversionRate = 0;
      }

      return stats;
    } catch (error) {
      console.error('‚ùå Erreur statistiques abonnements:', error);
      return {
        totalSubscriptions: 0,
        freeUsers: 0,
        premiumUsers: 0,
        cancelledUsers: 0,
        newSubscriptionsThisMonth: 0,
        monthlySubscriptions: 0,
        yearlySubscriptions: 0,
        conversionRate: 0
      };
    }
  }

  // Obtenir l'historique des paiements d'un utilisateur
  async getUserPaymentHistory(userId) {
    try {
      const { data: payments, error } = await supabase
        .from('payment_history')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (error) throw error;

      return payments || [];
    } catch (error) {
      console.error('‚ùå Erreur historique paiements:', error);
      return [];
    }
  }

  // Annuler un abonnement (c√¥t√© utilisateur)
  async cancelUserSubscription(userId) {
    try {
      console.log('üö´ Demande d\'annulation pour userId:', userId);
      
      // R√©cup√©rer l'abonnement actuel
      const { data: subscription, error } = await supabase
        .from('subscriptions')
        .select('stripe_subscription_id')
        .eq('user_id', userId)
        .single();

      if (error || !subscription || !subscription.stripe_subscription_id) {
        throw new Error('Aucun abonnement actif trouv√©');
      }

      // Annuler l'abonnement sur Stripe (√† la fin de la p√©riode)
      const cancelledSubscription = await stripe.subscriptions.update(
        subscription.stripe_subscription_id,
        {
          cancel_at_period_end: true
        }
      );

      // Mettre √† jour en base
      await supabase
        .from('subscriptions')
        .update({
          status: 'cancelled',
          cancelled_at: new Date().toISOString(),
          expires_at: new Date(cancelledSubscription.current_period_end * 1000).toISOString(),
          updated_at: new Date().toISOString()
        })
        .eq('user_id', userId);

      console.log('‚úÖ Abonnement programm√© pour annulation');
      
      return {
        success: true,
        message: 'Abonnement annul√© avec succ√®s',
        endsAt: new Date(cancelledSubscription.current_period_end * 1000)
      };
    } catch (error) {
      console.error('‚ùå Erreur annulation abonnement:', error);
      throw new Error('Impossible d\'annuler l\'abonnement: ' + error.message);
    }
  }

  // R√©activer un abonnement annul√©
  async reactivateUserSubscription(userId) {
    try {
      console.log('üîÑ R√©activation abonnement pour userId:', userId);
      
      const { data: subscription, error } = await supabase
        .from('subscriptions')
        .select('stripe_subscription_id')
        .eq('user_id', userId)
        .single();

      if (error || !subscription || !subscription.stripe_subscription_id) {
        throw new Error('Aucun abonnement trouv√©');
      }

      // R√©activer sur Stripe
      const reactivatedSubscription = await stripe.subscriptions.update(
        subscription.stripe_subscription_id,
        {
          cancel_at_period_end: false
        }
      );

      // Mettre √† jour en base
      await supabase
        .from('subscriptions')
        .update({
          status: 'active',
          cancelled_at: null,
          updated_at: new Date().toISOString()
        })
        .eq('user_id', userId);

      console.log('‚úÖ Abonnement r√©activ√©');
      
      return {
        success: true,
        message: 'Abonnement r√©activ√© avec succ√®s'
      };
    } catch (error) {
      console.error('‚ùå Erreur r√©activation abonnement:', error);
      throw new Error('Impossible de r√©activer l\'abonnement: ' + error.message);
    }
  }

  // Mettre √† jour le mode de paiement
  async updatePaymentMethod(userId, paymentMethodId) {
    try {
      console.log('üí≥ Mise √† jour mode de paiement pour userId:', userId);
      
      const { data: subscription, error } = await supabase
        .from('subscriptions')
        .select('stripe_customer_id, stripe_subscription_id')
        .eq('user_id', userId)
        .single();

      if (error || !subscription) {
        throw new Error('Abonnement non trouv√©');
      }

      // Attacher le nouveau mode de paiement au client
      await stripe.paymentMethods.attach(paymentMethodId, {
        customer: subscription.stripe_customer_id,
      });

      // D√©finir comme mode de paiement par d√©faut
      await stripe.customers.update(subscription.stripe_customer_id, {
        invoice_settings: {
          default_payment_method: paymentMethodId,
        },
      });

      // Mettre √† jour l'abonnement avec le nouveau mode de paiement
      if (subscription.stripe_subscription_id) {
        await stripe.subscriptions.update(subscription.stripe_subscription_id, {
          default_payment_method: paymentMethodId,
        });
      }

      console.log('‚úÖ Mode de paiement mis √† jour');
      
      return {
        success: true,
        message: 'Mode de paiement mis √† jour avec succ√®s'
      };
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour mode de paiement:', error);
      throw new Error('Impossible de mettre √† jour le mode de paiement: ' + error.message);
    }
  }

  // Pr√©visualiser une facture
  async previewInvoice(userId, priceId) {
    try {
      const { data: subscription, error } = await supabase
        .from('subscriptions')
        .select('stripe_customer_id, stripe_subscription_id')
        .eq('user_id', userId)
        .single();

      if (error || !subscription) {
        throw new Error('Abonnement non trouv√©');
      }

      const invoice = await stripe.invoices.retrieveUpcoming({
        customer: subscription.stripe_customer_id,
        subscription: subscription.stripe_subscription_id,
        subscription_items: [{
          id: subscription.stripe_subscription_id,
          price: priceId,
        }],
      });

      return {
        amount: invoice.amount_due,
        currency: invoice.currency,
        nextPaymentAttempt: invoice.next_payment_attempt
      };
    } catch (error) {
      console.error('‚ùå Erreur pr√©visualisation facture:', error);
      throw error;
    }
  }

  // Obtenir le portail client Stripe
  async createCustomerPortalSession(userId, returnUrl) {
    try {
      const { data: subscription, error } = await supabase
        .from('subscriptions')
        .select('stripe_customer_id')
        .eq('user_id', userId)
        .single();

      if (error || !subscription || !subscription.stripe_customer_id) {
        throw new Error('Client Stripe non trouv√©');
      }

      const session = await stripe.billingPortal.sessions.create({
        customer: subscription.stripe_customer_id,
        return_url: returnUrl,
      });

      return session.url;
    } catch (error) {
      console.error('‚ùå Erreur portail client:', error);
      throw error;
    }
  }
}

// Export singleton
const subscriptionService = new SubscriptionService();
module.exports = subscriptionService;